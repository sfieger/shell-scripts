#!/usr/bin/env bash

# Script for backing up data with rsync using Tower of Hanoi rotation method

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-d] [--day value] [--mount value] [--target value] uuid source1 [source2...]

Backs up data from the sources to the with uuid mounted drive.
Uses the Tower of Hanoi rotation method

Available options:

-h, --help      Print this help and exit
-d, --debug     Print script debug info
    --day       The day of the year for determining the output tower
    --mount     Specifies the mountpount for the backup (default: /media/backup)
    --target    Specifies the target-folder for the backup (default: /media/backup)
EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  
  msg "Unmounting ${mount}"
  
  sudo umount ${mount} > /dev/null 2>&1

  exit_code=$?
  if [[ ${exit_code} -ne 0 ]] ; then
    die "${RED} umount failed with exit code ${exit_code}."
  fi
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' BLACK='\033[0;30m' RED='\033[0;31m' GREEN='\033[0;32m' YELLOW='\033[0;33m' BLUE='\033[0;34m' MAGENTA='\033[0;35m' CYAN='\033[0;36m' WHITE='\033[1;37m'
  else
    NOFORMAT='' BLACK='' RED='' GREEN='' YELLOW='' BLUE='' MAGENTA='' CYAN='' WHITE=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  day=$(echo $(date +%j) | sed 's/^0*//')
  mount="/media/backup"
  target="${mount}"

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -d | --debug) set -x ;;
    --no-color) NO_COLOR=1 ;;
    --day)
        day="${2-}"
        shift
        ;;
    --mount)
        mount="${2-}"
        shift
        ;;
    --target)
        target="${2-}"
        shift
        ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  [[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"

  return 0
}

parse_params "$@"
setup_colors

uuid="${args[0]}"
unset args[0]

msg "Day: ${day}"
msg "Mounting ${uuid} on ${mount}"

sudo mount -U "${uuid}" "${mount}" > /dev/null 2>&1

exit_code=$?
if [[ ${exit_code} -ne 0 ]] ; then
    die "${RED} mount failed with exit code ${exit_code}."
fi

sources="${args[@]}"

msg "Sources: ${sources}"
msg "Target: ${target}"

mod37=$(((-$day & $day) % 37))
lookup=(32 0 1 26 2 23 27 0 3 16 24 30 28 11 0 13 4 7 17 0 25 22 31 15 29 10 12 6 0 21 14 9 5 20 8 19 18)

if [[ ${lookup[${mod37}]} -eq 0 ]] ; then
    target_folder="a"
elif [[ ${lookup[${mod37}]} -eq 1 ]] ; then
    target_folder="b"
elif [[ ${lookup[${mod37}]} -eq 2 ]] ; then
    target_folder="c"
elif [[ ${lookup[${mod37}]} -eq 3 ]] ; then
    target_folder="d"
elif [[ ${lookup[${mod37}]} -eq 4 ]] ; then
    target_folder="e"
else
    target_folder="f"
fi

msg "backing up ${sources} to ${target}/${target_folder}"

if [[ "${target_folder}" == "f" ]] ; then
    sudo rsync \
        --archive \
        --checksum \
        --delete \
        ${sources} "${target}/${target_folder}"
else
    sudo rsync \
        --archive \
        --delete \
        ${sources} "${target}/${target_folder}"
fi

msg "Last written: ${target}/${target_folder}"
echo "[$(date)] Last written: ${target_folder}" >> "${target}"/log.backup

cleanup
