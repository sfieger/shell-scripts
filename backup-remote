#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# Wrapper for backing up directories on my Windsows machine to my NAS using
# rsync in WSL
# -----------------------------------------------------------------------------
# Copyright (c) 2023 Steffen Fieger
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# -----------------------------------------------------------------------------
# Using the build-template of Dave Jarvis
# https://dave.autonoma.ca/
# -----------------------------------------------------------------------------
source /usr/local/bin/shell-template.sh

SCRIPT_VERSION="1.0.2"

ARG_DRIVE="Z:"
ARG_MOUNT="/media/backup"
ARG_TARGET="${ARG_MOUNT}/documents"

DEPENDENCIES=(
  "rsync,https://rsync.samba.org/"
)

ARGUMENTS+=(
  "d,drive,Windows drive (default: ${ARG_DRIVE})"
  "m,mount,Mountpoint for drive (default: ${ARG_MOUNT})"
  "s,sources,Comma seperated list of sources"
  "t,target,Target to backup to (default: ${ARG_TARGET})"
)

# -----------------------------------------------------------------------------
# Mounting the NAS
# -----------------------------------------------------------------------------
preprocess() {
  $log "Mounting ${ARG_DRIVE} on ${ARG_MOUNT}"

  sudo mount.drvfs ${ARG_DRIVE} ${ARG_MOUNT} > /dev/null 2>&1
  local -r EXIT_CODE=$?

  if [ ${EXIT_CODE} -ne 0 ]; then
    error "mount failed with exit code ${EXIT_CODE}."

    return 0
  fi

  SOURCES="${ARG_SOURCES}"
  SOURCES=$(echo ${SOURCES} | sed 's/,/ /g')

  $log "Sources: ${SOURCES}"
  $log "Target : ${ARG_TARGET}"

  return 1
}

# -----------------------------------------------------------------------------
# Perform all commands that the script requires.
#
# @return 0 - Indicate to terminate the script with non-zero exit level
# @return 1 - All tasks completed successfully (default)
# -----------------------------------------------------------------------------
execute() {
    $log "backing up ${SOURCES} to ${ARG_TARGET}"
    sudo rsync \
        --archive \
        --backup \
        --backup-dir="${ARG_TARGET}"/old \
        --delete \
        --numeric-ids \
        --compress \
        ${SOURCES} "${ARG_TARGET}"

  return 1
}

# -----------------------------------------------------------------------------
# Unmounting the NAS
# -----------------------------------------------------------------------------
postprocess() {
  $log "Umnounting ${ARG_MOUNT}"

  sudo umount ${ARG_MOUNT} > /dev/null 2>&1
  local -r EXIT_CODE=$?

  if [ ${EXIT_CODE} -ne 0 ]; then
    error "umount failed with exit code ${EXIT_CODE}."

    return 0
  fi
  
  return 1
}

# -----------------------------------------------------------------------------
# Parses a single command-line argument.
#
# @return Number of arguments and options parsed.
# -----------------------------------------------------------------------------
argument() {
  local consume=1

  case "$1" in
    -d|--drive)
      ARG_DRIVE="$2"
      consume=2
    ;;
    -m|--mount)
      ARG_MOUNT="$2"
      consume=2
    ;;
    -s|--sources)
      ARG_SOURCES="$2"
      consume=2
    ;;
    -t|--target)
      ARG_TARGET="$2"
      consume=2
  esac

  return ${consume}
}

main "$@"
